{"version":3,"sources":["components/DatePicker.jsx","components/constant.js","components/action.js","components/ErrorBoundary.jsx","App.js","components/appFunctions.js","components/Message.jsx","utilities/domo.js","utilities/middleware.js","components/reduce.js","utilities/store.js","index.js"],"names":["DatePicker","props","selectedDate","handleDateChange","utils","DateFnsUtils","Grid","container","justify","disableToolbar","variant","format","margin","id","label","value","onChange","KeyboardButtonProps","apiStart","type","payload","apiEnd","apiError","error","setStores","storeData","colNames","columns","rows","map","row","reduce","accum","data","index","failStores","console","log","ErrorBoundary","info","this","handleError","isError","children","Component","App","getStores","SelectedDate","StartDate_Col","EndDate_Col","onDateChange","errorState","length","Id_Col","filter_array","message","event","filter","push","columnName","operator","values","dataType","window","parent","postMessage","JSON","stringify","ConstructMessage","Date","parse","className","onError","connect","state","dateState","storeState","dispatch","date","setDatePicker","catchError","url","body","onSuccess","onFailure","apiAction","Domo","domoHttp","method","options","async","Promise","resolve","reject","req","XMLHttpRequest","open","setFormatHeaders","contentType","setRequestHeader","setContentHeaders","responseType","setResponseType","onload","isSuccess","status","includes","response","Blob","getResponseHeader","responseStr","ex","Error","statusText","onerror","send","json","isVerifiedOrigin","origin","whitelisted","match","blacklisted","getQueryParams","query","location","search","substr","result","split","forEach","part","item","decodeURIComponent","indexOf","csv","excel","post","put","get","delete","getAll","urls","all","onDataUpdate","cb","addEventListener","hasOwnProperty","alias","ack","source","err","warn","navigate","isNewWindow","filterContainer","column","userAgent","navigator","toLowerCase","safari","test","ios","webkit","messageHandlers","domofilter","operand","env","__util","apiMiddleware","next","action","a","dateInitial","initialStore","isLoadingData","initialError","logger","createLogger","rootReducer","combineReducers","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8045b671.chunk.js","sourcesContent":["import 'date-fns';\r\nimport React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nconst DatePicker = (props) => {\r\n  const { selectedDate, handleDateChange } = props;\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <Grid container justify=\"space-around\">\r\n        <KeyboardDatePicker\r\n          disableToolbar\r\n          variant=\"inline\"\r\n          format=\"MM/dd/yyyy\"\r\n          margin=\"normal\"\r\n          id=\"date-picker-inline\"\r\n          label=\"Date picker inline\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n      </Grid>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n","export const HAS_ERROR = 'HAS_ERROR';\r\n\r\nexport const CHANGE_DATEPICKER = 'CHANGE_DATEPICKER';\r\n\r\nexport const API = 'API';\r\nexport const API_START = 'API_START';\r\nexport const API_END = 'API_END';\r\nexport const API_ERROR = 'API_ERROR';\r\n\r\nexport const SET_STORES = 'SET_STORES';\r\nexport const GET_STORES = 'GET_STORES';\r\n\r\n//export const FETCH_STORES = 'FETCH_STORES';\r\n// export const DOMO_PENDING = 'DOMO_PENDING';\r\n// export const DOMO_SUCCESS = 'DOMO_SUCCESS';\r\n// export const DOMO_ERROR = 'DOMO_ERROR';\r\n","import {\r\n  CHANGE_DATEPICKER,\r\n  SET_STORES,\r\n  HAS_ERROR,\r\n  API,\r\n  API_START,\r\n  API_END,\r\n  API_ERROR,\r\n  GET_STORES,\r\n} from './constant';\r\n\r\nexport const apiStart = (label) => ({\r\n  type: API_START,\r\n  payload: label,\r\n});\r\n\r\nexport const apiEnd = (label) => ({\r\n  type: API_END,\r\n  payload: label,\r\n});\r\n\r\nexport const apiError = (error) => ({\r\n  type: API_ERROR,\r\n  payload: error,\r\n});\r\n\r\nconst apiAction = ({ url = '', body = '', onSuccess, onFailure }) => {\r\n  return {\r\n    type: API,\r\n    payload: {\r\n      url,\r\n      body,\r\n      onSuccess,\r\n      onFailure,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getStores = () => {\r\n  return apiAction({\r\n    url: '/sql/v1/dateList',\r\n    body: 'SELECT * FROM dateList limit 100',\r\n    onSuccess: setStores,\r\n    onFailure: failStores,\r\n    label: GET_STORES,\r\n  });\r\n};\r\n\r\nexport const setStores = (storeData) => {\r\n  const colNames = storeData.columns;\r\n  const payload = storeData.rows.map((row) => {\r\n    const rowClean = row.reduce((accum, data, index) => {\r\n      accum[colNames[index]] = data;\r\n      return accum;\r\n    }, {});\r\n    return rowClean;\r\n  });\r\n\r\n  return {\r\n    type: SET_STORES,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const failStores = (error) => {\r\n  console.log('middleware error', error);\r\n  return {\r\n    type: SET_STORES,\r\n    payload: { columns: ['StoreID'], rows: [] },\r\n  };\r\n};\r\nexport const setDatePicker = (date) => ({\r\n  type: CHANGE_DATEPICKER,\r\n  payload: date,\r\n});\r\n\r\nexport const catchError = (error, info) => ({\r\n  type: HAS_ERROR,\r\n  payload: { error, info },\r\n});\r\n\r\n// to sunset\r\n// export const fetchDomoDetails = (url, body) => async (dispatch) => {\r\n//   dispatch({ type: DOMO_PENDING });\r\n//   try {\r\n//     const data = await Domo.post(url, body, {\r\n//       contentType: 'text/plain',\r\n//     });\r\n\r\n//     const colNames = data.columns;\r\n//     const payload = data.rows.map((row) => {\r\n//       const rowClean = row.reduce((accum, data, index) => {\r\n//         accum[colNames[index]] = data;\r\n//         return accum;\r\n//       }, {});\r\n//       return rowClean;\r\n//     });\r\n\r\n//     dispatch({ type: FETCH_STORES, payload: payload });\r\n//   } catch (error) {\r\n//     dispatch({ type: DOMO_ERROR, payload: error });\r\n//   }\r\n// };\r\n// export const domoPending = () => ({\r\n//   type: DOMO_PENDING,\r\n//   payload: {},\r\n// });\r\n\r\n// export const domoSuccess = (data) => ({\r\n//   type: DOMO_SUCCESS,\r\n//   payload: data,\r\n// });\r\n\r\n// export const domoError = (error) => ({\r\n//   type: DOMO_ERROR,\r\n//   payload: error,\r\n// });\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  componentDidCatch(error, info) {\r\n    this.props.handleError(error, info);\r\n    console.log(error, info);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.isError) {\r\n      return <h2>Error</h2>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport DatePicker from './components/DatePicker';\nimport { FilterRows } from './components/appFunctions';\nimport { ConstructMessage } from './components/Message';\n\nimport { setDatePicker, catchError, getStores } from './components/action';\n\nimport './App.css';\nimport ErrorBoundary from './components/ErrorBoundary';\n\nconst mapStateToProps = (state) => {\n  return {\n    selectedDate: state.dateState.selectedDate,\n    storeData: state.storeState.storeData,\n    errorState: {\n      isError: state.errorState.isError,\n      error: state.errorState.error,\n    },\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onDateChange: (date) => dispatch(setDatePicker(date)),\n    onError: (error, info) => dispatch(catchError(error, info)),\n    getStores: () => dispatch(getStores()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.getStores();\n  }\n\n  render() {\n    console.log('render props', this.props);\n\n    const { onDateChange, selectedDate, storeData, errorState } = this.props;\n\n    if (storeData.length > 0) {\n      const filteredData = FilterRows(\n        storeData,\n        selectedDate,\n        'Open',\n        'Closed'\n      );\n      const message = ConstructMessage(filteredData, 'RowID');\n    }\n\n    return (\n      <div className=\"App\">\n        <ErrorBoundary\n          isError={errorState.isError}\n          handleError={errorState.onError}\n        >\n          <DatePicker\n            handleDateChange={onDateChange}\n            selectedDate={selectedDate}\n          />\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export function FilterRows(data_obj, SelectedDate, StartDate_Col, EndDate_Col) {\r\n  return data_obj.filter(\r\n    (row) =>\r\n      Date.parse(row[StartDate_Col]) <= SelectedDate &&\r\n      Date.parse(row[EndDate_Col]) >= SelectedDate\r\n  );\r\n}\r\n","export function ConstructMessage(data, Id_Col) {\r\n  const filter_array = data.map((row) => {\r\n    return row[Id_Col];\r\n  });\r\n\r\n  const message = {\r\n    event: 'filter',\r\n    filter: [],\r\n  };\r\n\r\n  message.filter.push({\r\n    columnName: Id_Col,\r\n    operator: 'IN',\r\n    values: filter_array,\r\n    dataType: 'numeric',\r\n  });\r\n\r\n  window.parent.postMessage(JSON.stringify(message), '*');\r\n\r\n  return message;\r\n}\r\n","export function Domo() {}\r\n\r\nDomo.post = function (url, body, options) {\r\n  return domoHttp('POST', url, options, true, body);\r\n};\r\n\r\nDomo.put = function (url, body, options) {\r\n  return domoHttp('PUT', url, options, true, body);\r\n};\r\n\r\nDomo.get = function (url, options) {\r\n  return domoHttp('GET', url, options);\r\n};\r\n\r\nDomo.delete = function (url, options) {\r\n  return domoHttp('DELETE', url, options);\r\n};\r\n\r\nfunction domoHttp(method, url, options, async, body) {\r\n  options = options || {};\r\n\r\n  // Return a new promise.\r\n  return new Promise(function (resolve, reject) {\r\n    // Do the usual XHR stuff\r\n    var req = new XMLHttpRequest();\r\n    if (async) {\r\n      req.open(method, url, async);\r\n    } else {\r\n      req.open(method, url);\r\n    }\r\n    setFormatHeaders(req, url, options);\r\n    setContentHeaders(req, options);\r\n    setResponseType(req, options);\r\n\r\n    req.onload = function () {\r\n      var data;\r\n      // This is called even on 404 etc so check the status\r\n      if (isSuccess(req.status)) {\r\n        if (['csv', 'excel'].includes(options.format) || !req.response) {\r\n          resolve(req.response);\r\n        }\r\n        if (options.responseType === 'blob') {\r\n          resolve(\r\n            new Blob([req.response], {\r\n              type: req.getResponseHeader('content-type'),\r\n            })\r\n          );\r\n        }\r\n\r\n        let responseStr = req.response;\r\n        try {\r\n          // if(!responseStr) {\r\n          //   responseStr = \"{}\";\r\n          // }\r\n          data = JSON.parse(responseStr);\r\n        } catch (ex) {\r\n          reject(Error('Invalid JSON response'));\r\n          return;\r\n        }\r\n        // Resolve the promise with the response text\r\n        resolve(data);\r\n      } else {\r\n        // Otherwise reject with the status text\r\n        // which will hopefully be a meaningful error\r\n        reject(Error(req.statusText));\r\n      }\r\n    };\r\n\r\n    // Handle network errors\r\n    req.onerror = function () {\r\n      reject(Error('Network Error'));\r\n    };\r\n\r\n    // Make the request\r\n    if (body) {\r\n      if (!options.contentType || options.contentType === 'application/json') {\r\n        var json = JSON.stringify(body);\r\n        // Make the request\r\n        req.send(json);\r\n      } else {\r\n        req.send(body);\r\n      }\r\n    } else {\r\n      req.send();\r\n    }\r\n  });\r\n}\r\n\r\nDomo.getAll = function (urls, options) {\r\n  return Promise.all(\r\n    urls.map(function (url) {\r\n      return Domo.get(url, options);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Let the domoapp optionally handle its own data updates.\r\n */\r\nDomo.onDataUpdate = function (cb) {\r\n  window.addEventListener('message', function (event) {\r\n    if (!isVerifiedOrigin(event.origin)) return;\r\n\r\n    if (typeof event.data === 'string' && event.data.length > 0) {\r\n      try {\r\n        var message = JSON.parse(event.data);\r\n        if (!message.hasOwnProperty('alias')) {\r\n          return;\r\n        }\r\n\r\n        var alias = message.alias;\r\n\r\n        // send acknowledgement to prevent autorefresh\r\n        var ack = JSON.stringify({\r\n          event: 'ack',\r\n          alias: alias,\r\n        });\r\n        event.source.postMessage(ack, event.origin);\r\n\r\n        // inform domo app which alias has been updated\r\n        cb(alias);\r\n      } catch (err) {\r\n        var info =\r\n          'There was an error in Domo.onDataUpdate! It may be that our event listener caught ' +\r\n          'a message from another source and tried to parse it, so your update still may have worked. ' +\r\n          'If you would like more info, here is the error: \\n';\r\n        console.warn(info, err);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Request a navigation change\r\n */\r\nDomo.navigate = function (url, isNewWindow) {\r\n  var message = JSON.stringify({\r\n    event: 'navigate',\r\n    url: url,\r\n    isNewWindow: isNewWindow,\r\n  });\r\n  window.parent.postMessage(message, '*');\r\n};\r\n\r\n/**\r\n * Post a filter to the parent page/dashboard\r\n * @param {String} column\r\n * @param {String} operator\r\n * @param {Array} values\r\n */\r\nDomo.filterContainer = function (column, operator, values, dataType) {\r\n  var userAgent = window.navigator.userAgent.toLowerCase(),\r\n    safari = /safari/.test(userAgent),\r\n    ios = /iphone|ipod|ipad/.test(userAgent);\r\n\r\n  var message = JSON.stringify({\r\n    event: 'filter',\r\n    filter: {\r\n      columnName: column,\r\n      operator: operator,\r\n      values: values,\r\n      dataType: dataType,\r\n    },\r\n  });\r\n\r\n  if (ios && !safari) {\r\n    window.webkit.messageHandlers.domofilter.postMessage({\r\n      column: column,\r\n      operand: operator,\r\n      values: values,\r\n      dataType: dataType,\r\n    });\r\n  } else {\r\n    window.parent.postMessage(message, '*');\r\n  }\r\n};\r\n\r\nDomo.env = getQueryParams();\r\n\r\nDomo.__util = {\r\n  isVerifiedOrigin,\r\n  getQueryParams,\r\n  setFormatHeaders,\r\n  isSuccess,\r\n};\r\n\r\nfunction isSuccess(status) {\r\n  return status >= 200 && status < 300;\r\n}\r\n\r\nfunction isVerifiedOrigin(origin) {\r\n  var whitelisted = origin.match(\r\n    '^https?://([^/]+[.])?(domo|domotech|domorig).(com|io)?(/.*)?$'\r\n  );\r\n  var blacklisted = origin.match('(.*).(domoapps).(.*)');\r\n  return !!whitelisted && !blacklisted;\r\n}\r\n\r\nfunction getQueryParams() {\r\n  var query = window.location.search.substr(1);\r\n  var result = {};\r\n  query.split('&').forEach(function (part) {\r\n    var item = part.split('=');\r\n    result[item[0]] = decodeURIComponent(item[1]);\r\n  });\r\n  return result;\r\n}\r\n\r\nfunction setFormatHeaders(req, url, options) {\r\n  if (url.indexOf('data/v1') === -1) {\r\n    return;\r\n  }\r\n\r\n  // set format\r\n  var formatTypes = {\r\n    'array-of-arrays': 'application/json',\r\n    csv: 'text/csv',\r\n    excel: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n  };\r\n  req.setRequestHeader(\r\n    'Accept',\r\n    options.format\r\n      ? formatTypes[options.format] || 'application/array-of-objects'\r\n      : 'application/array-of-objects'\r\n  );\r\n}\r\n\r\nfunction setContentHeaders(req, options) {\r\n  if (options.contentType) {\r\n    // set content type if user passed option\r\n    if (options.contentType !== 'multipart') {\r\n      req.setRequestHeader('Content-Type', options.contentType);\r\n    }\r\n  } else {\r\n    req.setRequestHeader('Content-Type', 'application/json');\r\n  }\r\n}\r\n\r\nfunction setResponseType(req, options) {\r\n  //set response type if user passed option\r\n  if (options.responseType) {\r\n    req.responseType = options.responseType;\r\n  }\r\n}\r\n","import { API } from '../components/constant';\r\nimport { Domo } from './domo';\r\nimport { apiStart, apiEnd, apiError } from '../components/action';\r\n\r\nconst apiMiddleware = ({ dispatch }) => (next) => async (action) => {\r\n  next(action);\r\n\r\n  if (action.type !== API) return;\r\n\r\n  const { url, body, onSuccess, onFailure, label } = action.payload;\r\n\r\n  // const dataOrParams = ['GET', 'DELETE'].includes(method) ? 'params' : 'data';\r\n  if (label) {\r\n    dispatch(apiStart(label));\r\n  }\r\n\r\n  const data = await Domo.post(url, body, {\r\n    contentType: 'text/plain',\r\n  });\r\n  console.log('my middleware', data);\r\n\r\n  try {\r\n    dispatch(onSuccess(data));\r\n  } catch (error) {\r\n    dispatch(onFailure(error));\r\n    dispatch(apiError(error));\r\n  } finally {\r\n    if (label) {\r\n      dispatch(apiEnd(label));\r\n    }\r\n  }\r\n};\r\n\r\nexport default apiMiddleware;\r\n","import {\r\n  CHANGE_DATEPICKER,\r\n  GET_STORES,\r\n  SET_STORES,\r\n  API_START,\r\n  API_END,\r\n  HAS_ERROR,\r\n} from './constant';\r\n\r\nconst today = new Date();\r\n\r\nconst dateInitial = {\r\n  selectedDate: today,\r\n};\r\n\r\nexport const dateState = (state = dateInitial, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_DATEPICKER:\r\n      return Object.assign({}, state, { selectedDate: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStore = {\r\n  storeData: [],\r\n  isLoadingData: false,\r\n};\r\n\r\nexport const storeState = (state = initialStore, action = {}) => {\r\n  switch (action.type) {\r\n    case SET_STORES:\r\n      return Object.assign({}, state, { storeData: action.payload });\r\n    case API_START:\r\n      if (action.payload === GET_STORES) {\r\n        return Object.assign({}, state, { isLoadingData: true });\r\n      }\r\n      break;\r\n    case API_END:\r\n      if (action.payload === GET_STORES) {\r\n        return Object.assign({}, state, { isLoadingData: false });\r\n      }\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialError = {\r\n  error: '',\r\n  isError: false,\r\n};\r\n\r\nexport const errorState = (state = initialError, action = {}) => {\r\n  switch (action.type) {\r\n    case HAS_ERROR:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isError: true,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// const initialDomoRequest = {\r\n//   isPending: false,\r\n//   data: [],\r\n//   error: '',\r\n// };\r\n// export const requestDomoState = (state = initialDomoRequest, action = {}) => {\r\n//   switch (action.type) {\r\n//     case DOMO_PENDING:\r\n//       return Object.assign({}, state, { isPending: true });\r\n\r\n//     case DOMO_SUCCESS:\r\n//       return Object.assign({}, state, {\r\n//         data: action.payload,\r\n//         isPending: false,\r\n//       });\r\n//     case DOMO_ERROR:\r\n//       return Object.assign({}, state, {\r\n//         error: action.payload,\r\n//         isPending: false,\r\n//       });\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport apiMiddleware from './middleware';\r\n\r\nimport {\r\n  dateState,\r\n  // requestDomoState,\r\n  storeState,\r\n  errorState,\r\n} from '../components/reduce';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({\r\n  dateState,\r\n  //requestDomoState,\r\n  storeState,\r\n  errorState,\r\n});\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger, apiMiddleware)\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from '../src/utilities/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}